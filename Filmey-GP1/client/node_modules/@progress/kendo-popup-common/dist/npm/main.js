'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var alignPoint = {
    "bottom": "bottom",
    "center": "center",
    "middle": "middle",
    "left": "left",
    "right": "right",
    "top": "top"
};

var align = function (options) {
    var anchorRect = options.anchorRect;
    var anchorAlign = options.anchorAlign;
    var elementRect = options.elementRect;
    var elementAlign = options.elementAlign;
    var margin = options.margin; if ( margin === void 0 ) margin = {};
    var anchorHorizontal = anchorAlign.horizontal;
    var anchorVertical = anchorAlign.vertical;
    var elementHorizontal = elementAlign.horizontal;
    var elementVertical = elementAlign.vertical;

    var horizontalMargin = margin.horizontal || 0;
    var verticalMargin = margin.vertical || 0;

    var top = anchorRect.top;
    var left = anchorRect.left;

    if (anchorVertical === alignPoint.bottom) {
        top += anchorRect.height;
    }

    if (anchorVertical === alignPoint.center || anchorVertical === alignPoint.middle) {
        top += Math.round(anchorRect.height / 2);
    }

    if (elementVertical === alignPoint.bottom) {
        top -= elementRect.height;
        verticalMargin *= -1;
    }

    if (elementVertical === alignPoint.center || elementVertical === alignPoint.middle) {
        top -= Math.round(elementRect.height / 2);
        verticalMargin *= -1;
    }

    if (anchorHorizontal === alignPoint.right) {
        left += anchorRect.width;
    }

    if (anchorHorizontal === alignPoint.center || anchorHorizontal === alignPoint.middle) {
        left += Math.round(anchorRect.width / 2);
    }

    if (elementHorizontal === alignPoint.right) {
        left -= elementRect.width;
        horizontalMargin *= -1;
    }

    if (elementHorizontal === alignPoint.center || elementHorizontal === alignPoint.middle) {
        left -= Math.round(elementRect.width / 2);
        horizontalMargin *= -1;
    }

    return {
        top: top + verticalMargin,
        left: left + horizontalMargin
    };
};

function addScroll(rect, scroll) {
    return {
        top: rect.top + scroll.y,
        left: rect.left + scroll.x,
        height: rect.height,
        width: rect.width
    };
}

function applyLocationOffset(rect, location, isOffsetBody) {
    var top = rect.top;
    var left = rect.left;

    if (isOffsetBody) {
        left = 0;
        top = 0;
    }

    return {
        top: top + location.top,
        left: left + location.left,
        height: rect.height,
        width: rect.width
    };
}

function ownerDocument(element) {
    return element.ownerDocument || element.document || element;
}

var getWindow = function (element) { return ownerDocument(element).defaultView; };

var getDocument = function (element) { return ownerDocument(element).documentElement; };

var cachedWidth = 0;

function scrollbarWidth() {
    if (!cachedWidth && typeof document !== 'undefined') {
        var div = document.createElement("div");

        div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
        div.innerHTML = "&nbsp;";
        document.body.appendChild(div);

        cachedWidth = div.offsetWidth - div.scrollWidth;

        document.body.removeChild(div);
    }

    return cachedWidth;
}

function windowViewport(element) {
    var win = getWindow(element);
    var document = getDocument(element);
    var result = {
        height: win.innerHeight,
        width: win.innerWidth
    };

    if (document.scrollHeight - document.clientHeight > 0) {
        result.width -= scrollbarWidth();
    }

    return result;
}

var boundingOffset = function (element) {
    if (!element.getBoundingClientRect) {
        var viewport = windowViewport(element);
        return {
            bottom: viewport.height,
            left: 0,
            right: viewport.width,
            top: 0
        };
    }

    var ref = element.getBoundingClientRect();
    var bottom = ref.bottom;
    var left = ref.left;
    var right = ref.right;
    var top = ref.top;

    return {
        bottom: bottom,
        left: left,
        right: right,
        top: top
    };
};

var offsetParent = function (element) {
    var offsetParent = element.offsetParent;

    while (offsetParent && offsetParent.style.position === "static") {
        offsetParent = offsetParent.offsetParent;
    }

    return offsetParent || getDocument(element);
};

var isBodyOffset = function (element) { return (offsetParent(element) === element.ownerDocument.body); };

var rectOfHiddenElement = function (element) {
    var ref = element.style;
    var display = ref.display;
    var left = ref.left;
    var position = ref.position;

    element.style.display = '';
    element.style.left = '-10000px';
    element.style.position = 'absolute';

    var rect = element.getBoundingClientRect();

    element.style.display = display;
    element.style.left = left;
    element.style.position = position;

    return rect;
};

var offset = function (element) {
    var rect = element.getBoundingClientRect();
    var left = rect.left;
    var top = rect.top;

    if (!rect.height && !rect.width) {
        rect = rectOfHiddenElement(element);
    }

    return {
        top: top,
        left: left,
        height: rect.height,
        width: rect.width
    };
};

var parents = function (element, until) {
    var result = [];
    var next = element.parentNode;

    while (next) {
        result.push(next);

        if (next === until) { break; }

        next = next.parentNode;
    }

    return result;
};

function scrollPosition(element) {
    var documentElement = getDocument(element);
    var win = getWindow(element);

    return {
        x: win.pageXOffset || documentElement.scrollLeft || 0,
        y: win.pageYOffset || documentElement.scrollTop || 0
    };
}

var elementScrollPosition = function (element) {
    if (element === (element.ownerDocument || {}).body) {
        return scrollPosition(element);
    }

    return {
        x: element.scrollLeft,
        y: element.scrollTop
    };
};

function parentScrollPosition(element) {
    var parent = offsetParent(element);

    return parent ? elementScrollPosition(parent) : { x: 0, y: 0 };
}

var position = function (element, parent) {
    var win = getWindow(element);
    var elementStyles = win.getComputedStyle(element);
    var offset$$1 = offset(element);
    var parentElement = parent || offsetParent(element);

    var ownerDocument = element.ownerDocument;
    var useRelative = parentElement !== ownerDocument.body && parentElement !== ownerDocument.documentElement;

    var parentOffset = { top: 0, left: 0 };

    if (elementStyles.position !== "fixed" && useRelative) {
        var parentStyles = win.getComputedStyle(parentElement);

        parentOffset = offset(parentElement);
        parentOffset.top += parseInt(parentStyles.borderTopWidth, 10);
        parentOffset.left += parseInt(parentStyles.borderLeftWidth, 10);
    }

    return {
        top: offset$$1.top - parentOffset.top,
        left: offset$$1.left - parentOffset.left,
        height: offset$$1.height,
        width: offset$$1.width
    };
};

var offsetParentScrollPosition = function (offsetParentElement, element) { return ( // eslint-disable-line no-arrow-condition
    offsetParentElement ? elementScrollPosition(offsetParentElement) : parentScrollPosition(element)
); };

var positionWithScroll = function (element, parent, scale) {
    if ( scale === void 0 ) scale = 1;

    var offsetParentElement = parent ? offsetParent(parent) : null;
    var ref = position(element, offsetParentElement);
    var top = ref.top;
    var left = ref.left;
    var height = ref.height;
    var width = ref.width;
    var ref$1 = offsetParentScrollPosition(offsetParentElement, element);
    var x = ref$1.x;
    var y = ref$1.y;
    var ownerDocument = element.ownerDocument;
    var positionScale = offsetParentElement === ownerDocument.body || offsetParentElement === ownerDocument.documentElement ? 1 : scale;

    return {
        top: top + y * positionScale,
        left: left + x * positionScale,
        height: height,
        width: width
    };
};

function removeScroll(rect, scroll) {
    return {
        top: rect.top - scroll.y,
        left: rect.left - scroll.x,
        height: rect.height,
        width: rect.width
    };
}

var collision = {
    "fit": "fit",
    "flip": "flip"
};

var fit = function(position, size, viewPortSize) {
    var output = 0;

    if (position + size > viewPortSize) {
        output = viewPortSize - (position + size);
    }

    if (position < 0) {
        output = -position;
    }

    return output;
};

var flip = function(ref) {
    var offset = ref.offset;
    var size = ref.size;
    var anchorSize = ref.anchorSize;
    var viewPortSize = ref.viewPortSize;
    var anchorAlignPoint = ref.anchorAlignPoint;
    var elementAlignPoint = ref.elementAlignPoint;
    var margin = ref.margin;

    var output = 0;

    var isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;
    var isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;
    var marginToAdd = 2 * margin; //2x to keep margin after flip

    if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {
        var isBeforeAnchor = anchorAlignPoint === alignPoint.top || anchorAlignPoint === alignPoint.left;
        if (offset < 0 && isBeforeAnchor) {
            output = size + anchorSize + marginToAdd;
            if (offset + output + size > viewPortSize) {
                output = 0; //skip flip
            }
        } else if (offset >= 0 && !isBeforeAnchor) {
            if (offset + size > viewPortSize) {
                output += -(anchorSize + size + marginToAdd);
            }

            if (offset + output < 0) {
                output = 0; //skip flip
            }
        }
    }

    return output;
};

var restrictToView = function (options) {
    var anchorRect = options.anchorRect;
    var anchorAlign = options.anchorAlign;
    var elementRect = options.elementRect;
    var elementAlign = options.elementAlign;
    var collisions = options.collisions;
    var viewPort = options.viewPort;
    var margin = options.margin; if ( margin === void 0 ) margin = {};
    var elementTop = elementRect.top;
    var elementLeft = elementRect.left;
    var elementHeight = elementRect.height;
    var elementWidth = elementRect.width;
    var viewPortHeight = viewPort.height;
    var viewPortWidth = viewPort.width;
    var horizontalMargin = margin.horizontal || 0;
    var verticalMargin = margin.vertical || 0;

    var left = 0;
    var top = 0;

    var isHorizontalFlip = collisions.horizontal === collision.flip;
    var isVerticalFlip = collisions.vertical === collision.flip;

    if (collisions.vertical === collision.fit) {
        top += fit(elementTop, elementHeight, viewPortHeight);
    }

    if (collisions.horizontal === collision.fit) {
        left += fit(elementLeft, elementWidth, viewPortWidth);
    }

    if (isVerticalFlip) {
        top += flip({
            margin: verticalMargin,
            offset: elementTop,
            size: elementHeight,
            anchorSize: anchorRect.height,
            viewPortSize: viewPortHeight,
            anchorAlignPoint: anchorAlign.vertical,
            elementAlignPoint: elementAlign.vertical
        });
    }

    if (isHorizontalFlip) {
        left += flip({
            margin: horizontalMargin,
            offset: elementLeft,
            size: elementWidth,
            anchorSize: anchorRect.width,
            viewPortSize: viewPortWidth,
            anchorAlignPoint: anchorAlign.horizontal,
            elementAlignPoint: elementAlign.horizontal
        });
    }
    var flippedHorizontal = isHorizontalFlip && left !== 0;
    var flippedVertical = isVerticalFlip && top !== 0;

    return {
        flipped: flippedHorizontal || flippedVertical,
        flip: {
            horizontal: flippedHorizontal,
            vertical: flippedVertical
        },
        offset: {
            left: left,
            top: top
        }
    };
};

var siblings = function (element) {
    var result = [];

    var sibling = element.parentNode.firstElementChild;

    while (sibling) {
        if (sibling !== element) {
            result.push(sibling);
        }

        sibling = sibling.nextElementSibling;
    }
    return result;
};

/* eslint-disable no-loop-func */

var siblingContainer = function (anchor, container) {
    var parentElements = parents(anchor);
    var containerElement = container;
    var siblingElements;
    var result;

    while (containerElement) {
        siblingElements = siblings(containerElement);

        result = parentElements.reduce(
            function (list, p) { return list.concat(siblingElements.filter(function (s) { return s === p; })); },
            []
        )[0];

        if (result) { break; }

        containerElement = containerElement.parentElement;
    }

    return result;
};

function zIndex(anchor, container) {
    if (!anchor || !container) { return null; }

    var sibling = siblingContainer(anchor, container);

    if (!sibling) { return null; }

    var result = [ anchor ].concat(parents(anchor, sibling)).reduce(
        function (index, p) {
            var zIndexStyle = p.style.zIndex || window.getComputedStyle(p).zIndex;
            var current = parseInt(zIndexStyle, 10);
            return current > index ? current : index;
        },
        0
    );

    return result ? (result + 1) : null;
}

var eitherRect = function (rect, offset) {
    if (!rect) {
        return { height: 0, left: offset.left, top: offset.top, width: 0 };
    }

    return rect;
};

var scaleRect = function (rect, scale) {
    if (!rect || scale === 1) {
        return rect;
    }

    return {
        height: rect.height / scale,
        left: rect.left / scale,
        top: rect.top / scale,
        width: rect.width / scale
    };
};

var removeStackingOffset = function (rect, stackingOffset) {
    if (!stackingOffset) { return rect; }

    var result = {
        height: rect.height,
        left: rect.left - stackingOffset.left,
        top: rect.top - stackingOffset.top,
        width: rect.width
    };

    return result;
};

function memoize(fun) {
    var result;
    var called = false;

    return function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        if (called) {
            return result;
        }

        result = fun.apply(void 0, args);
        called = true;
        return result;
    };
}

var hasRelativeStackingContext = memoize(function (elementSource) {
    if (!canUseDOM()) { return false; }

    // Component need to pass element to make sure document owner is correct.
    // This however might be performance hit if checked for example on each drag event.
    var currentDocument = elementSource ? elementSource.ownerDocument : document;

    if (!currentDocument || !currentDocument.body) { return false; }

    var top = 10;
    var parent = currentDocument.createElement("div");
    parent.style.transform = "matrix(10, 0, 0, 10, 0, 0)";
    parent.innerHTML = "<div style=\"position: fixed; top: " + top + "px;\">child</div>";

    currentDocument.body.appendChild(parent);

    var isDifferent = parent.children[0].getBoundingClientRect().top !== top;

    currentDocument.body.removeChild(parent);

    return isDifferent;
});

var canUseDOM = function () { return Boolean(
    // from fbjs
    typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement
); };

var utils = {
    eitherRect: eitherRect,
    scaleRect: scaleRect,
    removeStackingOffset: removeStackingOffset,
    hasRelativeStackingContext: hasRelativeStackingContext,
    canUseDOM: canUseDOM
};

/* eslint-disable arrow-body-style */
var STYLES = [
    'font-size',
    'font-family',
    'font-stretch',
    'font-style',
    'font-weight',
    'line-height'
];

var addOffset = function (current, addition) {
    return {
        left: current.left + addition.left,
        top: current.top + addition.top
    };
};

var getWindow$1 = function () {
    return utils.canUseDOM() ? window : null;
};

var getFontStyles = function (el) {
    var window = getWindow$1();

    if (!window || !el) { return []; }

    var computedStyles = window.getComputedStyle(el);

    return STYLES.map(function (font) { return ({ key: font, value: computedStyles[font] }); });
};

var hasOffsetParent = function (el) {
    if (!el) { return false; }

    return Boolean(el.offsetParent);
};

var offset$1 = function (el) {
    if (!el) { return null; }

    return offset(el);
};

var offsetAtPoint = function (element, currentLocation) {
    if (!element) { return null; }

    var ref = element.style;
    var left = ref.left;
    var top = ref.top;
    var transition = ref.transition;

    element.style.transition = 'none';
    element.style.left = (currentLocation.left) + "px";
    element.style.top = (currentLocation.top) + "px";

    var currentOffset = offset(element);

    element.style.left = left;
    element.style.top = top;

    // prevents elements with transition to be animated because of the change
    // tslint:disable-next-line:no-unused-expression
    element.offsetHeight;

    element.style.transition = transition;

    return currentOffset;
};

var position$2 = function (element, popupElement, scale) {
    if (!element || !popupElement) { return null; }

    var currentScale = scale || 1;

    return positionWithScroll(element, popupElement, currentScale);
};

var OVERFLOW_REGEXP = /auto|scroll/;

var overflowElementStyle = function (element) {
    return ("" + (element.style.overflow) + (element.style.overflowX) + (element.style.overflowY));
};

var overflowComputedStyle = function (element) {
    var styles = window.getComputedStyle(element);
    return ("" + (styles.overflow) + (styles.overflowX) + (styles.overflowY));
};

var overflowStyle = function (element) {
    return overflowElementStyle(element) || overflowComputedStyle(element);
};

var scrollableParents = function (element) {
    var parentElements = [];

    if (!utils.canUseDOM()) { return parentElements; }

    var parent = element.parentElement;

    while (parent) {
        if (OVERFLOW_REGEXP.test(overflowStyle(parent)) || parent.hasAttribute('data-scrollable')) {
            parentElements.push(parent);
        }

        parent = parent.parentElement;
    }

    parentElements.push(window);

    return parentElements;
};

var getRelativeContextElement = function (el) {
    if (!el || !utils.hasRelativeStackingContext()) { return null; }

    var parent = el.parentElement;

    while (parent) {
        if (window.getComputedStyle(parent).transform !== 'none') {
            return parent;
        }
        parent = parent.parentElement;
    }

    return null;
};

var stackingElementOffset = function (el) {
    var relativeContextElement = getRelativeContextElement(el);

    if (!relativeContextElement) { return null; }

    return offset(relativeContextElement);
};

var stackingElementScroll = function (el) {
    var relativeContextElement = getRelativeContextElement(el);

    if (!relativeContextElement) { return { x: 0, y: 0 }; }

    return {
        x: relativeContextElement.scrollLeft,
        y: relativeContextElement.scrollTop
    };
};

var stackingElementViewPort = function (el) {
    var relativeContextElement = getRelativeContextElement(el);

    if (!relativeContextElement) { return null; }

    return {
        height: relativeContextElement.scrollHeight,
        width: relativeContextElement.scrollWidth
    };
};

var useRelativePosition = function (el) {
    return Boolean(getRelativeContextElement(el));
};

var zoomLevel = function () {
    if (!utils.canUseDOM()) { return 1; }

    return parseFloat((document.documentElement.clientWidth / window.innerWidth).toFixed(2)) || 1;
};

var isZoomed = function () {
    return zoomLevel() > 1;
};

var zIndex$1 = function (anchor, container) {
    if (!anchor || !utils.canUseDOM()) { return null; }

    var sibling = siblingContainer(anchor, container);

    if (!sibling) { return null; }

    var result = [ anchor ].concat(parents(anchor, sibling)).reduce(
        function (index, p) {
            var zIndexStyle = p.style.zIndex || window.getComputedStyle(p).zIndex;
            var current = parseInt(zIndexStyle, 10);
            return current > index ? current : index;
        },
        0
    );

    return result ? (result + 1) : null;
};

var domUtils = {
    addOffset: addOffset,
    addScroll: addScroll,
    align: align,
    boundingOffset: boundingOffset,
    getFontStyles: getFontStyles,
    getWindow: getWindow$1,
    hasOffsetParent: hasOffsetParent,
    offset: offset$1,
    offsetAtPoint: offsetAtPoint,
    position: position$2,
    removeScroll: removeScroll,
    restrictToView: restrictToView,
    scrollPosition: scrollPosition,
    scrollableParents: scrollableParents,
    getRelativeContextElement: getRelativeContextElement,
    stackingElementOffset: stackingElementOffset,
    stackingElementScroll: stackingElementScroll,
    stackingElementViewPort: stackingElementViewPort,
    useRelativePosition: useRelativePosition,
    windowViewPort: windowViewport,
    zoomLevel: zoomLevel,
    isZoomed: isZoomed,
    zIndex: zIndex$1
};

/* eslint-disable arrow-body-style */

var absoluteRect = function (anchor, element, offset, scale) {
    var scrollPos = elementScrollPosition$1(anchor, element);
    var rect = utils.eitherRect(domUtils.offset(anchor), offset);
    var stackScale = 2 * scale;

    var stackScroll = domUtils.stackingElementScroll(element);
    if (scale !== 1 && stackScroll) {
        stackScroll.x /= stackScale;
        stackScroll.y /= stackScale;
    }

    var stackOffset = domUtils.stackingElementOffset(element);
    if (scale !== 1 && stackOffset) {
        stackOffset.left /= stackScale;
        stackOffset.top /= stackScale;
    }

    return domUtils.removeScroll(
        domUtils.addScroll(
            utils.removeStackingOffset(
                utils.scaleRect(rect, scale),
                stackOffset
            ),
            stackScroll
        ),
        scrollPos
    );
};

var relativeRect = function (anchor, element, offset, scale) {
    var rect = utils.eitherRect(domUtils.position(anchor, element, scale), offset);
    return utils.scaleRect(rect, scale);
};

var elementScrollPosition$1 = function (anchor, element) {
    return anchor ? { x: 0, y: 0 } : domUtils.scrollPosition(element);
};

var alignElement = function (settings) {
    var anchor = settings.anchor;
    var element = settings.element;
    var anchorAlign = settings.anchorAlign;
    var elementAlign = settings.elementAlign;
    var margin = settings.margin;
    var offset = settings.offset;
    var positionMode = settings.positionMode;
    var scale = settings.scale;

    var currentScale = scale || 1;
    var fixedMode = positionMode === 'fixed' || !domUtils.hasOffsetParent(element);
    var anchorRect = fixedMode ? absoluteRect(anchor, element, offset, currentScale) : relativeRect(anchor, element, offset, currentScale);
    var elementRect = utils.scaleRect(domUtils.offset(element), currentScale);

    var result = domUtils.align({
        anchorAlign: anchorAlign,
        anchorRect: anchorRect,
        elementAlign: elementAlign,
        elementRect: elementRect,
        margin: margin
    });

    return result;
};

var positionElement = function (settings) {
    var anchor = settings.anchor;
    var currentLocation = settings.currentLocation;
    var element = settings.element;
    var anchorAlign = settings.anchorAlign;
    var elementAlign = settings.elementAlign;
    var collisions = settings.collisions;
    var margin = settings.margin;
    var scale = settings.scale;

    var currentScale = scale || 1;
    var elementOffset = domUtils.offsetAtPoint(element, currentLocation);
    var elementRect = utils.scaleRect(elementOffset, currentScale);
    var anchorOffset = utils.scaleRect(domUtils.offset(anchor), currentScale);
    var anchorRect = utils.eitherRect(anchorOffset, currentLocation);

    var viewPort = settings.viewPort || domUtils.windowViewPort(element);
    viewPort.width = viewPort.width / currentScale;
    viewPort.height = viewPort.height / currentScale;

    var result = domUtils.restrictToView({
        anchorAlign: anchorAlign,
        anchorRect: anchorRect,
        collisions: collisions,
        elementAlign: elementAlign,
        elementRect: elementRect,
        margin: margin,
        viewPort: viewPort
    });

    var offset = domUtils.addOffset(currentLocation, result.offset);

    return {
        flip: result.flip,
        flipped: result.flipped,
        offset: offset
    };
};

exports.align = align;
exports.addScroll = addScroll;
exports.applyLocationOffset = applyLocationOffset;
exports.boundingOffset = boundingOffset;
exports.isBodyOffset = isBodyOffset;
exports.offsetParent = offsetParent;
exports.offset = offset;
exports.parents = parents;
exports.parentScrollPosition = parentScrollPosition;
exports.position = position;
exports.positionWithScroll = positionWithScroll;
exports.removeScroll = removeScroll;
exports.restrictToView = restrictToView;
exports.scrollPosition = scrollPosition;
exports.siblingContainer = siblingContainer;
exports.siblings = siblings;
exports.zIndex = zIndex;
exports.alignElement = alignElement;
exports.domUtils = domUtils;
exports.utils = utils;
exports.positionElement = positionElement;
exports.getDocumentElement = getDocument;
exports.getWindow = getWindow;
exports.getWindowViewPort = windowViewport;
exports.AlignPoint = alignPoint;
exports.Collision = collision;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,