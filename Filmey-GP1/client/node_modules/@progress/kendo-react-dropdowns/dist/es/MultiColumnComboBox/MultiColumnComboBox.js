var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { MultiColumnList } from './../common/MultiColumnList';
import { classNames, getScrollbarWidth, setScrollbarWidth, getter } from '@progress/kendo-react-common';
import ComboBox from '../ComboBox/ComboBox';
var columnWidth = function (width, defaultWidth) {
    if (width) {
        return typeof width === 'number' ? width + 'px' : width;
    }
    return defaultWidth;
};
/**
 * Represents the MultiColumnComboBox component.
 */
export var MultiColumnComboBox = React.forwardRef(function (props, ref) {
    var target = React.useRef(null);
    var comboBoxRef = React.useRef(null);
    var scrollbarWidth = getScrollbarWidth();
    var _a = props.columns, columns = _a === void 0 ? defaultProps.columns : _a, _b = props.popupSettings, popupSettings = _b === void 0 ? defaultProps.popupSettings : _b, onOpen = props.onOpen, onClose = props.onClose, onFocus = props.onFocus, onBlur = props.onBlur, onChange = props.onChange, onFilterChange = props.onFilterChange, onPageChange = props.onPageChange, other = __rest(props, ["columns", "popupSettings", "onOpen", "onClose", "onFocus", "onBlur", "onChange", "onFilterChange", "onPageChange"]);
    React.useImperativeHandle(target, function () {
        return ({
            element: comboBoxRef.current && comboBoxRef.current.element,
            focus: function () {
                if (comboBoxRef.current) {
                    comboBoxRef.current.focus();
                }
            },
            get value() { return comboBoxRef.current && comboBoxRef.current.value; },
            get name() { return comboBoxRef.current && comboBoxRef.current.name; },
            props: props
        });
    });
    React.useImperativeHandle(ref, function () { return target.current; });
    var popupWidth = React.useMemo(function () {
        return "calc(" + columns.map(function (column) { return columnWidth(column.width, defaultProps.width); }).filter(Boolean).join(' + ') + " + " + scrollbarWidth + "px)";
    }, [columns, scrollbarWidth]);
    var header = React.useMemo(function () { return (React.createElement(React.Fragment, null,
        props.header,
        React.createElement("div", { className: "k-grid-header" },
            React.createElement("div", { className: "k-grid-header-wrap" },
                React.createElement("table", { role: "presentation" },
                    React.createElement("colgroup", null, columns.map(function (column, i) {
                        return (React.createElement("col", { key: column.uniqueKey ? column.uniqueKey : i, style: { width: column.width ? column.width : defaultProps.width } }));
                    })),
                    React.createElement("tbody", null,
                        React.createElement("tr", null, columns.map(function (column, i) {
                            return (React.createElement("th", { key: column.uniqueKey ? column.uniqueKey : i, className: "k-header" }, column.header || '\u00A0'));
                        })))))))); }, [props.header, columns]);
    var skip = props.virtual ? props.virtual.skip : 0;
    var itemRender = React.useCallback(function (li, liProps) {
        var children = columns.map(function (column, i) { return (React.createElement("span", { className: "k-cell", style: { width: column.width ? column.width : defaultProps.width }, key: column.uniqueKey ? column.uniqueKey : i }, column.field ? getter(column.field)(liProps.dataItem) : '')); });
        var group = undefined;
        var curGroup, prevGroup, groupGetter, data = props.data || [];
        var index = liProps.index - skip;
        if (props.groupField !== undefined) {
            groupGetter = getter(props.groupField);
            curGroup = groupGetter(data[index]);
            prevGroup = groupGetter(data[index - 1]);
            if (curGroup && prevGroup && curGroup !== prevGroup) {
                group = curGroup;
            }
        }
        if (group) {
            children.push(React.createElement("div", { key: "group", className: "k-cell k-group-cell" },
                React.createElement("span", null, group)));
        }
        var rendering = React.cloneElement(li, __assign({}, li.props), children);
        return props.itemRender ? props.itemRender.call(undefined, rendering, liProps) : rendering;
    }, [columns, props.groupField, props.itemRender, props.data, skip]);
    var handleEvent = React.useCallback(function (handler, event) {
        if (handler) {
            handler.call(undefined, __assign({}, event, { target: target.current }));
        }
    }, []);
    var onOpenHandler = React.useCallback(function (event) { return handleEvent(onOpen, event); }, [onOpen]);
    var onCloseHandler = React.useCallback(function (event) { return handleEvent(onClose, event); }, [onClose]);
    var onFocusHandler = React.useCallback(function (event) { return handleEvent(onFocus, event); }, [onFocus]);
    var onBlurHandler = React.useCallback(function (event) { return handleEvent(onBlur, event); }, [onBlur]);
    var onChangeHandler = React.useCallback(function (event) { return handleEvent(onChange, event); }, [onChange]);
    var onFilterChangeHandler = React.useCallback(function (event) { return handleEvent(onFilterChange, event); }, [onFilterChange]);
    var onPageChangeHandler = React.useCallback(function (event) { return handleEvent(onPageChange, event); }, [onPageChange]);
    React.useEffect(function () { setScrollbarWidth(); });
    var List = React.useCallback(function (listProps) { return React.createElement(MultiColumnList, __assign({}, listProps)); }, []);
    return (React.createElement(ComboBox, __assign({}, other, { list: List, popupSettings: __assign({ width: popupWidth }, popupSettings, { popupClass: 'k-dropdowngrid-popup', className: classNames('k-popup-flush', popupSettings.className) }), ref: comboBoxRef, header: header, itemRender: itemRender, onOpen: onOpenHandler, onClose: onCloseHandler, onFocus: onFocusHandler, onBlur: onBlurHandler, onChange: onChangeHandler, onFilterChange: onFilterChangeHandler, onPageChange: onPageChangeHandler })));
});
var propTypes = __assign({}, ComboBox.propTypes, { columns: PropTypes.any.isRequired });
var defaultProps = {
    columns: [],
    popupSettings: {},
    width: '200px'
};
MultiColumnComboBox.displayName = 'KendoMultiColumnComboBox';
// TODO: delete casting when @types/react is updated!
MultiColumnComboBox.propTypes = propTypes;
MultiColumnComboBox.defaultProps = defaultProps;
