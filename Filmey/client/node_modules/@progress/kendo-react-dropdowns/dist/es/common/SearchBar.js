var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import ClearButton from './ClearButton';
/**
 * @hidden
 */
var SearchBar = /** @class */ (function (_super) {
    __extends(SearchBar, _super);
    function SearchBar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SearchBar.prototype, "input", {
        /**
         * @hidden
         */
        get: function () {
            return this._input;
        },
        enumerable: true,
        configurable: true
    });
    SearchBar.prototype.componentDidUpdate = function (prevProps) {
        var prevValue = prevProps.value;
        var prevSuggestedText = prevProps.suggestedText;
        var _a = this.props, value = _a.value, suggestedText = _a.suggestedText, focused = _a.focused;
        var input = this.input;
        var valueChanged = prevValue !== value || suggestedText !== prevSuggestedText;
        var deleting = valueChanged && prevValue.startsWith(value) &&
            !(prevSuggestedText && suggestedText && prevSuggestedText.endsWith(suggestedText));
        if (focused && input && document.activeElement !== input) {
            input.focus();
        }
        if (suggestedText && valueChanged && !deleting && input) {
            input.setSelectionRange(value.length - suggestedText.length, value.length);
        }
    };
    SearchBar.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.expanded, expanded = _b === void 0 ? false : _b, disabled = _a.disabled, _c = _a.role, role = _c === void 0 ? 'listbox' : _c, render = _a.render;
        var searchbar = (React.createElement("span", { className: "k-searchbar", key: "searchbar" },
            React.createElement("input", { autoComplete: "off", id: this.props.id, type: "text", size: this.props.size, placeholder: this.props.placeholder, className: "k-input", tabIndex: this.props.tabIndex, accessKey: this.props.accessKey, role: role, name: this.props.name, value: this.props.value, onChange: this.props.onChange, ref: function (input) { return _this._input = input; }, onKeyDown: this.props.onKeyDown, onFocus: this.props.onFocus, onBlur: this.props.onBlur, "aria-disabled": disabled || undefined, disabled: disabled || undefined, readOnly: this.props.readOnly || undefined, "aria-haspopup": "listbox", "aria-expanded": expanded, "aria-owns": this.props.owns, "aria-activedescendant": expanded ? this.props.activedescendant : undefined, "aria-describedby": this.props.ariaDescribedBy, "aria-labelledby": this.props.ariaLabelledBy })));
        return [
            (render ? render.call(undefined, searchbar) : searchbar),
            !this.props.loading && this.props.clearButton && React.createElement(ClearButton, { onClick: this.props.clearButtonClick, key: "clearbutton" }),
            this.props.loading && React.createElement("span", { className: "k-icon k-i-loading", key: "loading" })
        ];
    };
    return SearchBar;
}(React.Component));
export default SearchBar;
